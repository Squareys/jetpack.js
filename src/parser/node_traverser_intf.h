/* Generated by Racket Script! */

#include "syntax_nodes.h"

class INodeTraverser {
public:
    virtual void Traverse(const Sp<ArrayExpression>& node) = 0;

    virtual void Traverse(const Sp<ArrayPattern>& node) = 0;

    virtual void Traverse(const Sp<ArrowFunctionExpression>& node) = 0;

    virtual void Traverse(const Sp<AssignmentExpression>& node) = 0;

    virtual void Traverse(const Sp<AssignmentPattern>& node) = 0;

    virtual void Traverse(const Sp<AsyncArrowFunctionExpression>& node) = 0;

    virtual void Traverse(const Sp<AsyncFunctionDeclaration>& node) = 0;

    virtual void Traverse(const Sp<AsyncFunctionExpression>& node) = 0;

    virtual void Traverse(const Sp<AwaitExpression>& node) = 0;

    virtual void Traverse(const Sp<BinaryExpression>& node) = 0;

    virtual void Traverse(const Sp<BlockStatement>& node) = 0;

    virtual void Traverse(const Sp<BreakStatement>& node) = 0;

    virtual void Traverse(const Sp<CallExpression>& node) = 0;

    virtual void Traverse(const Sp<CatchClause>& node) = 0;

    virtual void Traverse(const Sp<ClassBody>& node) = 0;

    virtual void Traverse(const Sp<ClassDeclaration>& node) = 0;

    virtual void Traverse(const Sp<ClassExpression>& node) = 0;

    virtual void Traverse(const Sp<ComputedMemberExpression>& node) = 0;

    virtual void Traverse(const Sp<ConditionalExpression>& node) = 0;

    virtual void Traverse(const Sp<ContinueStatement>& node) = 0;

    virtual void Traverse(const Sp<DebuggerStatement>& node) = 0;

    virtual void Traverse(const Sp<Directive>& node) = 0;

    virtual void Traverse(const Sp<DoWhileStatement>& node) = 0;

    virtual void Traverse(const Sp<EmptyStatement>& node) = 0;

    virtual void Traverse(const Sp<ExportAllDeclaration>& node) = 0;

    virtual void Traverse(const Sp<ExportDefaultDeclaration>& node) = 0;

    virtual void Traverse(const Sp<ExportNamedDeclaration>& node) = 0;

    virtual void Traverse(const Sp<ExportSpecifier>& node) = 0;

    virtual void Traverse(const Sp<ExpressionStatement>& node) = 0;

    virtual void Traverse(const Sp<ForInStatement>& node) = 0;

    virtual void Traverse(const Sp<ForOfStatement>& node) = 0;

    virtual void Traverse(const Sp<ForStatement>& node) = 0;

    virtual void Traverse(const Sp<FunctionDeclaration>& node) = 0;

    virtual void Traverse(const Sp<FunctionExpression>& node) = 0;

    virtual void Traverse(const Sp<Identifier>& node) = 0;

    virtual void Traverse(const Sp<IfStatement>& node) = 0;

    virtual void Traverse(const Sp<Import>& node) = 0;

    virtual void Traverse(const Sp<ImportDeclaration>& node) = 0;

    virtual void Traverse(const Sp<ImportDefaultSpecifier>& node) = 0;

    virtual void Traverse(const Sp<ImportNamespaceSpecifier>& node) = 0;

    virtual void Traverse(const Sp<ImportSpecifier>& node) = 0;

    virtual void Traverse(const Sp<LabeledStatement>& node) = 0;

    virtual void Traverse(const Sp<Literal>& node) = 0;

    virtual void Traverse(const Sp<MetaProperty>& node) = 0;

    virtual void Traverse(const Sp<MethodDefinition>& node) = 0;

    virtual void Traverse(const Sp<Module>& node) = 0;

    virtual void Traverse(const Sp<NewExpression>& node) = 0;

    virtual void Traverse(const Sp<ObjectExpression>& node) = 0;

    virtual void Traverse(const Sp<ObjectPattern>& node) = 0;

    virtual void Traverse(const Sp<Property>& node) = 0;

    virtual void Traverse(const Sp<RegexLiteral>& node) = 0;

    virtual void Traverse(const Sp<RestElement>& node) = 0;

    virtual void Traverse(const Sp<ReturnStatement>& node) = 0;

    virtual void Traverse(const Sp<Script>& node) = 0;

    virtual void Traverse(const Sp<SequenceExpression>& node) = 0;

    virtual void Traverse(const Sp<SpreadElement>& node) = 0;

    virtual void Traverse(const Sp<StaticMemberExpression>& node) = 0;

    virtual void Traverse(const Sp<Super>& node) = 0;

    virtual void Traverse(const Sp<SwitchCase>& node) = 0;

    virtual void Traverse(const Sp<SwitchStatement>& node) = 0;

    virtual void Traverse(const Sp<TaggedTemplateExpression>& node) = 0;

    virtual void Traverse(const Sp<TemplateElement>& node) = 0;

    virtual void Traverse(const Sp<ThisExpression>& node) = 0;

    virtual void Traverse(const Sp<ThrowStatement>& node) = 0;

    virtual void Traverse(const Sp<TryStatement>& node) = 0;

    virtual void Traverse(const Sp<UnaryExpression>& node) = 0;

    virtual void Traverse(const Sp<UpdateExpression>& node) = 0;

    virtual void Traverse(const Sp<VariableDeclaration>& node) = 0;

    virtual void Traverse(const Sp<VariableDeclarator>& node) = 0;

    virtual void Traverse(const Sp<WhileStatement>& node) = 0;

    virtual void Traverse(const Sp<WithStatement>& node) = 0;

    virtual void Traverse(const Sp<YieldExpression>& node) = 0;

};
