/* Generated by Ruby Script! */

#pragma once

enum class SyntaxNodeType {
    Invalid = 0,

    ArrayExpression,
    ArrayPattern,
    ArrowFunctionExpression,
    AssignmentExpression,
    AssignmentPattern,
    AwaitExpression,
    BinaryExpression,
    BlockStatement,
    BreakStatement,
    CallExpression,
    CatchClause,
    ClassBody,
    ClassDeclaration,
    ClassExpression,
    ConditionalExpression,
    ContinueStatement,
    DebuggerStatement,
    Directive,
    DoWhileStatement,
    EmptyStatement,
    ExportAllDeclaration,
    ExportDefaultDeclaration,
    ExportNamedDeclaration,
    ExportSpecifier,
    ExpressionStatement,
    ForInStatement,
    ForOfStatement,
    ForStatement,
    FunctionDeclaration,
    FunctionExpression,
    Identifier,
    IfStatement,
    Import,
    ImportDeclaration,
    ImportDefaultSpecifier,
    ImportNamespaceSpecifier,
    ImportSpecifier,
    LabeledStatement,
    Literal,
    MetaProperty,
    MethodDefinition,
    Module,
    NewExpression,
    ObjectExpression,
    ObjectPattern,
    Property,
    RegexLiteral,
    RestElement,
    ReturnStatement,
    Script,
    SequenceExpression,
    SpreadElement,
    MemberExpression,
    Super,
    SwitchCase,
    SwitchStatement,
    TaggedTemplateExpression,
    TemplateElement,
    TemplateLiteral,
    ThisExpression,
    ThrowStatement,
    TryStatement,
    UnaryExpression,
    UpdateExpression,
    VariableDeclaration,
    VariableDeclarator,
    WhileStatement,
    WithStatement,
    YieldExpression,
    ArrowParameterPlaceHolder,
    JSXClosingElement,
    JSXElement,
    JSXEmptyExpression,
    JSXExpressionContainer,
    JSXIdentifier,
    JSXMemberExpression,
    JSXAttribute,
    JSXNamespacedName,
    JSXOpeningElement,
    JSXSpreadAttribute,
    JSXText,

};

static const char* SyntaxNodeTypeToString(SyntaxNodeType type_);

class ArrayExpression;
class ArrayPattern;
class ArrowFunctionExpression;
class AssignmentExpression;
class AssignmentPattern;
class AwaitExpression;
class BinaryExpression;
class BlockStatement;
class BreakStatement;
class CallExpression;
class CatchClause;
class ClassBody;
class ClassDeclaration;
class ClassExpression;
class ConditionalExpression;
class ContinueStatement;
class DebuggerStatement;
class Directive;
class DoWhileStatement;
class EmptyStatement;
class ExportAllDeclaration;
class ExportDefaultDeclaration;
class ExportNamedDeclaration;
class ExportSpecifier;
class ExpressionStatement;
class ForInStatement;
class ForOfStatement;
class ForStatement;
class FunctionDeclaration;
class FunctionExpression;
class Identifier;
class IfStatement;
class Import;
class ImportDeclaration;
class ImportDefaultSpecifier;
class ImportNamespaceSpecifier;
class ImportSpecifier;
class LabeledStatement;
class Literal;
class MetaProperty;
class MethodDefinition;
class Module;
class NewExpression;
class ObjectExpression;
class ObjectPattern;
class Property;
class RegexLiteral;
class RestElement;
class ReturnStatement;
class Script;
class SequenceExpression;
class SpreadElement;
class MemberExpression;
class Super;
class SwitchCase;
class SwitchStatement;
class TaggedTemplateExpression;
class TemplateElement;
class TemplateLiteral;
class ThisExpression;
class ThrowStatement;
class TryStatement;
class UnaryExpression;
class UpdateExpression;
class VariableDeclaration;
class VariableDeclarator;
class WhileStatement;
class WithStatement;
class YieldExpression;
class ArrowParameterPlaceHolder;
class JSXClosingElement;
class JSXElement;
class JSXEmptyExpression;
class JSXExpressionContainer;
class JSXIdentifier;
class JSXMemberExpression;
class JSXAttribute;
class JSXNamespacedName;
class JSXOpeningElement;
class JSXSpreadAttribute;
class JSXText;
