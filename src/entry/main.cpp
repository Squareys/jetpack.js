#include <iostream>
#include <fstream>
#include <string>

#include <boost/program_options.hpp>

#include "spdlog/spdlog.h"
#include "../codegen/codegen.h"
#include "../parser/parser.hpp"
#include "../dumper/ast_to_json.h"
#include "../artery.h"

namespace po = boost::program_options;

using namespace parser;

int main(int argc, char** argv) {
#ifdef DEBUG
    spdlog::set_level(spdlog::level::debug);
#else
    spdlog::set_level(spdlog::level::warn);
#endif
    spdlog::debug("hello world");

    std::string entry_file;

    po::options_description desc("Allowed options");
    desc.add_options()
        ("entry", po::value<std::string>(&entry_file)->required(), "entry file of bundler")
        ("output", po::value<std::string>(), "output file location")
        ("print", "print the code generated by bundler")
        ("dump-ast", "dump json of ast of file")
    ;
    po::variables_map vm;
    po::store(po::parse_command_line(argc, argv, desc), vm);
    po::notify(vm);

    auto src = make_shared<UString>();

    (*src) = Artery::ReadFileStream(entry_file);

//    std::cout << utils::To_UTF8(*src) << std::endl;

    int64_t begin = utils::GetCurrentMs();
    try {
        Parser parser(src);
        auto script = parser.ParseScript();

        if (vm.count("print")) {
            CodeGen codegen;
            codegen.TraverseNode(script);
        }
        if (vm.count("output")) {
            std::cout << "output type: " << vm["output"].as<std::string>() << std::endl;
        }
        if (vm.count("dump-ast")) {
            auto json_result = dumper::AstToJson::Dump(script);
            std::cout << json_result.dump(2) << std::endl;
        }
    } catch (ParseError& err) {
        std::cerr << err.ErrorMessage() << std::endl;
    } catch (std::exception& ex) {
        std::cerr << ex.what() << std::endl;
    }
    int64_t end = utils::GetCurrentMs();
    std::cout << end - begin << std::endl;
    return 0;
}
