#lang racket

(require "js-syntax.rkt")

(define symbol-tbl (make-hash))

(for-each
  (lambda (node)
    (let (
      [node-id (syntax-node-id node)]
      [node-base (syntax-node-base node)]
      [node-props (syntax-node-props node)]
    )
      (match node-id
        [(cons 'Virtual name) (hash-set! symbol-tbl node-id node)]
        [_ (hash-set! symbol-tbl node-id node)]
      )
    )
  )
  syntax-list
)

(define (type->string type) (match type
  ['String "UString"]
  ['Boolean "bool"]
  [(cons type-prefix pair-value) (match type-prefix
    ['Vec (string-append "std::vector<" (type->string pair-value) ">")]
    ['Option (string-append "std::optional<" (type->string pair-value) ">")]
    ['Variant (string-append
      "std::variant<"
      (substring
        (foldl
          (lambda (a b) (string-append b ", " (type->string a)))
          ""
          pair-value
        )
        2
      )
      ">")
    ]
  )]
  [_ (string-append "Sp<" (symbol->string type) ">")]
))

(define (prop->string prop) (letrec (
  [prop-type (car prop)]
  [prop-name (cdr prop)]
  [type-name (type->string prop-type)]
)
  (string-append type-name " " prop-name)
))

(printf "/* Generated by Racket Script! */~n")
(newline)
(printf "#include \"syntax_node.h\"~n")
(printf "#include <optional>~n")
(printf "#include <vector>~n")
(newline)
(printf "enum SyntaxNodeType {~n")
(printf "    Invalid,~n")
(newline)
(for-each
  (lambda (node)
    (let (
      [node-id (syntax-node-id node)]
      [node-base (syntax-node-base node)]
    )
      (when (symbol? node-id)
        (printf "    ~s,~n" node-id)
      )
    )
  )
  syntax-list
)
(newline)
(printf "}~n")
(newline)

(for-each
  (lambda (node)
    (let (
      [node-id (syntax-node-id node)]
      [node-base (syntax-node-base node)]
    )
      (when (symbol? node-id)
        (let (
          [base-str (symbol->string node-base)]
        )
          (printf "class ~s: public ~a {~n" node-id base-str)
          (printf "public:~n")
          (printf "    ~s();~n" node-id)
          (newline)
          (for-each (lambda (prop)
            (printf "    ~a;~n" (prop->string prop))
          ) (syntax-node-props node))
          (newline)
          (printf "};~n")
          (newline)
        )
      )
    )
  )
  syntax-list
)
